{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nfunction FetchDataComponent_table_0_tr_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"td\");\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const forecast_r2 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(forecast_r2.FieldName);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(forecast_r2.FieldValue);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(forecast_r2.FundName);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(forecast_r2.Environment);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(forecast_r2.CollectionName);\n  }\n}\nfunction FetchDataComponent_table_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"table\", 1)(1, \"thead\")(2, \"tr\")(3, \"th\");\n    i0.ɵɵtext(4, \"FieldName\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"th\");\n    i0.ɵɵtext(6, \"FieldValue\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"th\");\n    i0.ɵɵtext(8, \"FundName\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"th\");\n    i0.ɵɵtext(10, \"Environment\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"th\");\n    i0.ɵɵtext(12, \"CollectionName\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(13, \"tbody\");\n    i0.ɵɵtemplate(14, FetchDataComponent_table_0_tr_14_Template, 11, 5, \"tr\", 2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(14);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.forecasts);\n  }\n}\nexport class FetchDataComponent {\n  constructor(http, baseUrl) {\n    this.forecasts = [];\n    http.get(baseUrl + 'weatherforecast').subscribe(result => {\n      this.forecasts.push(result[0]);\n      this.forecasts.push(result[1]);\n      console.log(JSON.stringify(result));\n      console.log(this.forecasts);\n    }, error => console.error(error));\n  }\n}\nFetchDataComponent.ɵfac = function FetchDataComponent_Factory(t) {\n  return new (t || FetchDataComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject('BASE_URL'));\n};\nFetchDataComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: FetchDataComponent,\n  selectors: [[\"app-fetch-data\"]],\n  decls: 1,\n  vars: 1,\n  consts: [[\"class\", \"table table-striped\", \"aria-labelledby\", \"tableLabel\", 4, \"ngIf\"], [\"aria-labelledby\", \"tableLabel\", 1, \"table\", \"table-striped\"], [4, \"ngFor\", \"ngForOf\"]],\n  template: function FetchDataComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, FetchDataComponent_table_0_Template, 15, 1, \"table\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.forecasts);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf],\n  encapsulation: 2\n});","map":{"version":3,"mappings":";;;;;IAgBIA,0BAAuC;IACjCA,YAAwB;IAAAA,iBAAK;IACjCA,0BAAI;IAAAA,YAAyB;IAAAA,iBAAK;IAClCA,0BAAI;IAAAA,YAAuB;IAAAA,iBAAK;IAChCA,0BAAI;IAAAA,YAA0B;IAAAA,iBAAK;IACnCA,0BAAI;IAAAA,aAA6B;IAAAA,iBAAK;;;;IAJlCA,eAAwB;IAAxBA,2CAAwB;IACxBA,eAAyB;IAAzBA,4CAAyB;IACzBA,eAAuB;IAAvBA,0CAAuB;IACvBA,eAA0B;IAA1BA,6CAA0B;IAC1BA,eAA6B;IAA7BA,gDAA6B;;;;;IAhBvCA,gCAAkF;IAGxEA,yBAAS;IAAAA,iBAAK;IAClBA,0BAAI;IAAAA,0BAAU;IAAAA,iBAAK;IACnBA,0BAAI;IAAAA,wBAAQ;IAAAA,iBAAK;IACjBA,0BAAI;IAAAA,4BAAW;IAAAA,iBAAK;IACpBA,2BAAI;IAAAA,+BAAc;IAAAA,iBAAK;IAG3BA,8BAAO;IACLA,4EAOK;IACPA,iBAAQ;;;;IARmBA,gBAAY;IAAZA,0CAAY;;;ACTzC,OAAM,MAAOC,kBAAkB;EAG7BC,YAAYC,IAAgB,EAAsBC,OAAe;IAF1D,cAAS,GAA8B,EAAE;IAG9CD,IAAI,CAACE,GAAG,CAA4BD,OAAO,GAAG,iBAAiB,CAAC,CAACE,SAAS,CAACC,MAAM,IAAG;MAClF,IAAI,CAACC,SAAS,CAACC,IAAI,CAACF,MAAM,CAAC,CAAC,CAAC,CAAC;MAC9B,IAAI,CAACC,SAAS,CAACC,IAAI,CAACF,MAAM,CAAC,CAAC,CAAC,CAAC;MAC9BG,OAAO,CAACC,GAAG,CAACC,IAAI,CAACC,SAAS,CAACN,MAAM,CAAC,CAAC;MACnCG,OAAO,CAACC,GAAG,CAAC,IAAI,CAACH,SAAS,CAAC;IAE7B,CAAC,EAAEM,KAAK,IAAIJ,OAAO,CAACI,KAAK,CAACA,KAAK,CAAC,CAAC;EACnC;;AAXWb,kBAAkB;mBAAlBA,kBAAkB,4DAGS,UAAU;AAAA;AAHrCA,kBAAkB;QAAlBA,kBAAkB;EAAAc;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDF/BnB,wEAoBQ;;;MApByDA,oCAAe","names":["i0","FetchDataComponent","constructor","http","baseUrl","get","subscribe","result","forecasts","push","console","log","JSON","stringify","error","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Comparisonful-main\\ContentfulComparisionWeb\\ClientApp\\src\\app\\fetch-data\\fetch-data.component.html","C:\\Comparisonful-main\\ContentfulComparisionWeb\\ClientApp\\src\\app\\fetch-data\\fetch-data.component.ts"],"sourcesContent":["\r\n\r\n\r\n\r\n\r\n<table class='table table-striped' aria-labelledby=\"tableLabel\" *ngIf=\"forecasts\">\r\n  <thead>\r\n    <tr>\r\n      <th>FieldName</th>\r\n      <th>FieldValue</th>\r\n      <th>FundName</th>\r\n      <th>Environment</th>\r\n      <th>CollectionName</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr *ngFor=\"let forecast of forecasts\">\r\n      <td>{{ forecast.FieldName }}</td>\r\n      <td>{{ forecast.FieldValue }}</td>\r\n      <td>{{ forecast.FundName }}</td>\r\n      <td>{{ forecast.Environment }}</td>\r\n      <td>{{ forecast.CollectionName }}</td>\r\n      \r\n    </tr>\r\n  </tbody>\r\n</table>\r\n","import { Component, Inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Component({\r\n  selector: 'app-fetch-data',\r\n  templateUrl: './fetch-data.component.html'\r\n})\r\nexport class FetchDataComponent {\r\n  public forecasts: ContentDisplayModelItem[] = [];\r\n\r\n  constructor(http: HttpClient, @Inject('BASE_URL') baseUrl: string) {\r\n    http.get<ContentDisplayModelItem[]>(baseUrl + 'weatherforecast').subscribe(result => {\r\n      this.forecasts.push(result[0]);\r\n      this.forecasts.push(result[1]);\r\n      console.log(JSON.stringify(result));\r\n      console.log(this.forecasts);\r\n     \r\n    }, error => console.error(error));\r\n  }\r\n}\r\n\r\ninterface ContentDisplayModelItem {\r\n  FieldName: string;\r\n  FieldValue: string;\r\n  FundName: string;\r\n  Environment: string ;\r\n  CollectionName: string; \r\n\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}